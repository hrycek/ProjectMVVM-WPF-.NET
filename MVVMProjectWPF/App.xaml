<Application x:Class="ColorModes.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:ColorModes"
             xmlns:properties="clr-namespace:ColorModes.Properties"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
         
        <!--styling our window-->
        <Style TargetType="{x:Type Window}" x:Key="WindowStyle">
            <Setter Property="FontFamily" Value="Corbel"/>
            <Style.Triggers>
                <!--first we will have to check which mode user wants to switch to by default we selected light in settings here... what we want is 
                when user selects the radio button for dark the ui should sweitch to dark mode n so on..-->

                <!--Lets bind our settings property first-->
                <!--#region Black Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Black">
                    <Setter Property="Background" Value="Black"/>
                    <Setter Property="Foreground" Value="White"/>
                </DataTrigger>
                <!--#endregion-->

                <!--#region Dark Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Dark">
                    <Setter Property="Background" Value="#363C49"/>
                    <Setter Property="Foreground" Value="White"/>
                </DataTrigger>
                <!--#endregion-->

                <!--#region Light Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Light">
                    <Setter Property="Background" Value="LightGray"/>
                    <Setter Property="Foreground" Value="Black"/>
                </DataTrigger>
                <!--#endregion-->

                <!--#region White Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="White">
                    <Setter Property="Background" Value="White"/>
                    <Setter Property="Foreground" Value="Black"/>
                </DataTrigger>
                <!--#endregion-->
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type ListBox}">
           
            <Style.Triggers>
                <!--first we will have to check which mode user wants to switch to by default we selected light in settings here... what we want is 
                when user selects the radio button for dark the ui should sweitch to dark mode n so on..-->

                <!--Lets bind our settings property first-->
                <!--#region Black Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Black">
                    <Setter Property="Background" Value="Black"/>
                    <Setter Property="Foreground" Value="White"/>
                    
                </DataTrigger>
                <!--#endregion-->

                <!--#region Dark Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Dark">
                    <Setter Property="Background" Value="#363C49"/>
                    <Setter Property="Foreground" Value="White"/>
                    <Setter Property="BorderBrush" Value="Teal"/>
                </DataTrigger>
                <!--#endregion-->

                <!--#region Light Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Light">
                    <Setter Property="Background" Value="LightGray"/>
                    <Setter Property="Foreground" Value="Black"/>
                </DataTrigger>
                <!--#endregion-->

                <!--#region White Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="White">
                    <Setter Property="Background" Value="White"/>
                    <Setter Property="Foreground" Value="Black"/>
                </DataTrigger>
                <!--#endregion-->
            </Style.Triggers>
        </Style>
        <!--here we will do the styling of our ui elements to switch from modes (black, dark, light & white)-->
        <Style TargetType="{x:Type TextBlock}">
            <Style.Triggers>

                <!--first we will have to check which mode user wants to switch to by default we selected light in settings here... what we want is 
                when user selects the radio button for dark the ui should sweitch to dark mode n so on..-->

                <!--Lets bind our settings property first-->
                <!--#region Black Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Black">
                    <Setter Property="Background" Value="Transparent"/>
                    
                    <Setter Property="Foreground" Value="White"/>
                </DataTrigger>
                <!--#endregion-->

                <!--#region Dark Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Dark">
                    <Setter Property="Background" Value="Transparent"/>
                    
                    <Setter Property="Foreground" Value="White"/>


                </DataTrigger>
                <!--#endregion-->

                <!--#region Light Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Light">
                    <Setter Property="Background" Value="Transparent"/>
                    
                    <Setter Property="Foreground" Value="#363C49"/>
                </DataTrigger>
                <!--#endregion-->

                <!--#region White Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="White">
                    <Setter Property="Background" Value="Transparent"/>
                    
                    <Setter Property="Foreground" Value="Black"/>
                </DataTrigger>
                <!--#endregion-->
            </Style.Triggers>
        </Style>
        
        <Style TargetType="{x:Type Button}">
            <Setter Property="FontSize" Value="16"></Setter>
            <Style.Triggers>
                
                <!--first we will have to check which mode user wants to switch to by default we selected light in settings here... what we want is 
                when user selects the radio button for dark the ui should sweitch to dark mode n so on..-->
                
                <!--Lets bind our settings property first-->
                <!--#region Black Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Black">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="White"/>
                    <Setter Property="Foreground" Value="White"/>

                </DataTrigger>

                <Trigger Property="IsMouseOver" Value="True">
                    <Trigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                
                                <DoubleAnimation Duration="0:0:0.250" To="20" 
                                                            Storyboard.TargetProperty="FontSize" />
                       
                            </Storyboard>

                        </BeginStoryboard>
                    </Trigger.EnterActions>
                    <Trigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard>


                                <DoubleAnimation Duration="0:0:0.550" To="16" 
                                                            Storyboard.TargetProperty="FontSize" />

                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.ExitActions>
                </Trigger>
                <!--#endregion-->

                <!--#region Dark Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Dark">
                    <Setter Property="Background" Value="Teal"/>
                    <Setter Property="BorderBrush" Value="#363C49"/>
                    <Setter Property="Foreground" Value="White"/>
                  
             
                </DataTrigger>
                <!--#endregion-->

                <!--#region Light Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Light">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Teal"/>
                    <Setter Property="Foreground" Value="Black"/>
                </DataTrigger>
                <!--#endregion-->

                <!--#region White Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="White">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Black"/>
                    <Setter Property="Foreground" Value="Black"/>
                </DataTrigger>
                <!--#endregion-->
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type GroupBox}">
            <Style.Triggers>

                <!--first we will have to check which mode user wants to switch to by default we selected light in settings here... what we want is 
                when user selects the radio button for dark the ui should sweitch to dark mode n so on..-->

                <!--Lets bind our settings property first-->
                <!--#region Black Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Black">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="White"/>
                    <Setter Property="Foreground" Value="White"/>
                </DataTrigger>
                <!--#endregion-->

                <!--#region Dark Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Dark">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Teal"/>
                    <Setter Property="Foreground" Value="Teal"/>
                </DataTrigger>
                <!--#endregion-->

                <!--#region Light Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Light">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Teal"/>
                    <Setter Property="Foreground" Value="White"/>
                </DataTrigger>
                <!--#endregion-->

                <!--#region White Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="White">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Black"/>
                    <Setter Property="Foreground" Value="Black"/>
                </DataTrigger>
                <!--#endregion-->
            </Style.Triggers>
        </Style>
      
        <Style TargetType="{x:Type TextBox}">
            <Style.Triggers>

                <!--first we will have to check which mode user wants to switch to by default we selected light in settings here... what we want is 
                when user selects the radio button for dark the ui should sweitch to dark mode n so on..-->

                <!--Lets bind our settings property first-->
                <!--#region Black Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Black">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="White"/>
                    <Setter Property="Foreground" Value="White"/>
                </DataTrigger>
                <!--#endregion-->

                <!--#region Dark Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Dark">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Teal"/>
                    <Setter Property="Foreground" Value="White"/>
                </DataTrigger>
                <!--#endregion-->

                <!--#region Light Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Light">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Teal"/>
                    <Setter Property="Foreground" Value="Teal"/>
                </DataTrigger>
                <!--#endregion-->

                <!--#region White Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="White">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Black"/>
                    <Setter Property="Foreground" Value="Black"/>
                </DataTrigger>

                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="ToolTip"
                            Value="{Binding RelativeSource={x:Static RelativeSource.Self},
                        Path=(Validation.Errors)[0].ErrorContent}"/>
                    <Setter Property="BorderThickness"
                            Value="1"/>
                </Trigger>
                <!--#endregion-->
            </Style.Triggers>

          
        </Style>

        <Style TargetType="{x:Type Label}">
            <Style.Triggers>

                <!--first we will have to check which mode user wants to switch to by default we selected light in settings here... what we want is 
                when user selects the radio button for dark the ui should sweitch to dark mode n so on..-->

                <!--Lets bind our settings property first-->
                <!--#region Black Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Black">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="White"/>
                    <Setter Property="Foreground" Value="White"/>
                </DataTrigger>
                <!--#endregion-->

                <!--#region Dark Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Dark">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Teal"/>
                    <Setter Property="Foreground" Value="White"/>
                </DataTrigger>
                <!--#endregion-->

                <!--#region Light Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Light">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Teal"/>
                    <Setter Property="Foreground" Value="Teal"/>
                </DataTrigger>
                <!--#endregion-->

                <!--#region White Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="White">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Black"/>
                    <Setter Property="Foreground" Value="Black"/>
                </DataTrigger>
                <!--#endregion-->
            </Style.Triggers>
        </Style>

        <Style x:Key="GridViewColumnHeaderStyle1" TargetType="{x:Type GridViewColumnHeader}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                        <Border Background="Transparent">
                            <TextBlock x:Name="ContentHeader" Margin="0 0 0 5" FontSize="14" FontWeight="Bold" Text="{TemplateBinding Content}" Padding="5,5,5,0" Width="{TemplateBinding Width}" TextAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>

                
            </Setter>


            <Setter Property="Foreground" Value="Black" />
            <Setter Property="FontFamily" Value="Segoe UI" />
            <Setter Property="FontSize" Value="12" />
        </Style>

        <Style TargetType="{x:Type ListView}">
            <Style.Triggers>

                <!--first we will have to check which mode user wants to switch to by default we selected light in settings here... what we want is 
                when user selects the radio button for dark the ui should sweitch to dark mode n so on..-->

                <!--Lets bind our settings property first-->
                <!--#region Black Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Black">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="White"/>
                    <Setter Property="Foreground" Value="White"/>
                </DataTrigger>
                <!--#endregion-->

                <!--#region Dark Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Dark">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Teal"/>
                    <Setter Property="Foreground" Value="White"/>
                </DataTrigger>
                <!--#endregion-->

                <!--#region Light Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Light">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Teal"/>
                    <Setter Property="Foreground" Value="Teal"/>
                </DataTrigger>
                <!--#endregion-->

                <!--#region White Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="White">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Black"/>
                    <Setter Property="Foreground" Value="Black"/>
                </DataTrigger>
                <!--#endregion-->
            </Style.Triggers>
        </Style>
        
        <Style TargetType="{x:Type RadioButton}">
            <Style.Triggers>

                <!--first we will have to check which mode user wants to switch to by default we selected light in settings here... what we want is 
                when user selects the radio button for dark the ui should sweitch to dark mode n so on..-->

                <!--Lets bind our settings property first-->
                <!--#region Black Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Black">
                    <Setter Property="Foreground" Value="White"/>
                </DataTrigger>
                <!--#endregion-->

                <!--#region Dark Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Dark">
                    <Setter Property="Foreground" Value="White"/>
                </DataTrigger>
                <!--#endregion-->

                <!--#region Light Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="Light">
                    <Setter Property="Foreground" Value="Teal"/>
                </DataTrigger>
                <!--#endregion-->

                <!--#region White Mode-->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ColorMode}" Value="White">
                    <Setter Property="Foreground" Value="Black"/>
                </DataTrigger>
                <!--#endregion-->
            </Style.Triggers>
        </Style>

        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <Style x:Key="ItemContainerStyle" TargetType="{x:Type TabItem}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabItem}">
                        <Grid Margin="15,5">
                            <Path Width="10" Height="14" Margin="0,2,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" Stretch="Fill" Fill="#FF000000" Data="F1 M 39.8307,37.6042L 36.6641,34.4375L 25.1849,23.3542L 35.4766,23.3542L 50.5182,37.6042L 35.4766,51.8542L 25.1849,51.8542L 36.6641,40.7708L 39.8307,37.6042 Z " Visibility="{Binding IsSelected, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <ContentPresenter Content="{TemplateBinding Header}" Margin="20,5,10,5">
                                <ContentPresenter.Resources>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="FontSize" Value="18" />
                                        <Setter Property="FontWeight" Value="Light" />
                                    </Style>
                                </ContentPresenter.Resources>
                            </ContentPresenter>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="TabControlStyle1" TargetType="{x:Type TabControl}">
            <Setter Property="TabStripPlacement" Value="Left" />
            <Setter Property="ItemContainerStyle" Value="{StaticResource ItemContainerStyle}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabControl}">
                        <Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="1*" />
                            </Grid.ColumnDefinitions>
                            <Border Grid.Column="0" Padding="5">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="0,0" StartPoint="1,0">
                                        <GradientStop Color="#FFC7C7C7" Offset="0"/>
                                        <GradientStop Color="#FFECECEC" Offset="1"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <DockPanel>
                                    <Image DockPanel.Dock="Bottom" HorizontalAlignment="Center" Margin="20" Source="pack://application:,,,/StackOverflowTabControl;component/twc.png" Width="175" />
                                    <TabPanel x:Name="headerPanel" Background="Transparent" Grid.Column="0" IsItemsHost="true" Margin="2,2,2,0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                                </DockPanel>
                            </Border>
                            <Border x:Name="contentPanel" Grid.Column="1" Margin="5,0,0,0">
                                <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </Application.Resources>
</Application>
